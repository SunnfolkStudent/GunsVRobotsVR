//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Guns/TestScenePlaceholderScripts/PlaceHolderGunScene.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlaceHolderGunScene : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlaceHolderGunScene()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlaceHolderGunScene"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""52af892d-f79c-4d59-a1ac-e46f4f0368e8"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""1c31be10-64da-4945-88b5-276dca0d0833"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""86902829-3041-476a-b6c7-4a0bea4ed8e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""55b32142-c446-4abc-8dae-e2e97d4afa9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""976cc959-2353-4cc6-bb50-822704117260"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap1"",
                    ""type"": ""Button"",
                    ""id"": ""70dd58b0-2fa7-45ef-83af-3936b805e6b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""swap 2"",
                    ""type"": ""Button"",
                    ""id"": ""1f463c3a-c6d1-4098-97e4-0903533b4c87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""swap 3"",
                    ""type"": ""Button"",
                    ""id"": ""a2789b2f-a89e-4142-af7e-237ec473194a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7d030716-8977-4260-92a8-2df2c49c8645"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5fa2d297-4fe3-4a80-9c01-0c888f1c40fc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""30cf0495-61f3-4ad3-ac66-05a7e0fa3f8a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3878b54f-3f44-4466-a861-e776cb43893f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""25073599-7f71-492f-9e32-79f4d5ea5560"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6dbad72d-a19c-4327-8192-0d47e0a8f823"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2021870f-f26a-42c0-8438-621ee4676e02"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a735f460-df34-487c-9d67-26150c6e878e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ea7fc41-402e-438b-84e0-a86512d1cf93"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7161815-f35a-4cf4-8d6c-5ae77ef299de"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""swap 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11d27ed6-a4b8-4cb1-babf-6a121a1b4be1"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""swap 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Walk = m_Move.FindAction("Walk", throwIfNotFound: true);
        m_Move_Look = m_Move.FindAction("Look", throwIfNotFound: true);
        m_Move_Fire = m_Move.FindAction("Fire", throwIfNotFound: true);
        m_Move_Reload = m_Move.FindAction("Reload", throwIfNotFound: true);
        m_Move_Swap1 = m_Move.FindAction("Swap1", throwIfNotFound: true);
        m_Move_swap2 = m_Move.FindAction("swap 2", throwIfNotFound: true);
        m_Move_swap3 = m_Move.FindAction("swap 3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Walk;
    private readonly InputAction m_Move_Look;
    private readonly InputAction m_Move_Fire;
    private readonly InputAction m_Move_Reload;
    private readonly InputAction m_Move_Swap1;
    private readonly InputAction m_Move_swap2;
    private readonly InputAction m_Move_swap3;
    public struct MoveActions
    {
        private @PlaceHolderGunScene m_Wrapper;
        public MoveActions(@PlaceHolderGunScene wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Move_Walk;
        public InputAction @Look => m_Wrapper.m_Move_Look;
        public InputAction @Fire => m_Wrapper.m_Move_Fire;
        public InputAction @Reload => m_Wrapper.m_Move_Reload;
        public InputAction @Swap1 => m_Wrapper.m_Move_Swap1;
        public InputAction @swap2 => m_Wrapper.m_Move_swap2;
        public InputAction @swap3 => m_Wrapper.m_Move_swap3;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnWalk;
                @Look.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnFire;
                @Reload.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnReload;
                @Swap1.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap1;
                @Swap1.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap1;
                @Swap1.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap1;
                @swap2.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap2;
                @swap2.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap2;
                @swap2.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap2;
                @swap3.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap3;
                @swap3.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap3;
                @swap3.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnSwap3;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Swap1.started += instance.OnSwap1;
                @Swap1.performed += instance.OnSwap1;
                @Swap1.canceled += instance.OnSwap1;
                @swap2.started += instance.OnSwap2;
                @swap2.performed += instance.OnSwap2;
                @swap2.canceled += instance.OnSwap2;
                @swap3.started += instance.OnSwap3;
                @swap3.performed += instance.OnSwap3;
                @swap3.canceled += instance.OnSwap3;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnSwap1(InputAction.CallbackContext context);
        void OnSwap2(InputAction.CallbackContext context);
        void OnSwap3(InputAction.CallbackContext context);
    }
}
